#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('airbnb-back-end:server');
var http = require('http');
const WS = require('ws')
const db = require('../db')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '6010');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/** let's make some websockets */
const wss = new WS.Server({
  path: "/ws",
  clientTracking: true,
  server: server,
});

wss.on("connection", (ws)=>{
  console.log('WS Connected');
  ws.on("message", (msg)=>{
    console.log(msg)
    const msg_json = JSON.parse(msg);
    console.log(msg_json);
    wss.clients.forEach((client)=>{
      client.send(JSON.stringify(msg_json))
    })
    const {message, sender, recipient,} = msg
    const time = Date.now();
    const insertMsgQuery = `INSERT INTO messages
    (sender, recipient, timestamp, message)
        VALUES
        (?,?,?,?)`
    db.query(insertMsgQuery,[sender,recipient,time,message],(err)=>{
          if(err){throw err}
    })
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
